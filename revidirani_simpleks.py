{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "co: \n",
      "(0, 1, 2)\n",
      "[[3.]\n",
      " [2.]\n",
      " [2.]]\n",
      "w: \n",
      "[0. 1. 1.]\n",
      "cbb: \n",
      "[5.]\n",
      "Maksimum je 5.0\n",
      "Vrednost bazne promenljive:   1.0 je  3.0\n",
      "Vrednost bazne promenljive:   2.0 je  2.0\n",
      "Vrednost bazne promenljive:   3.0 je  2.0\n",
      "Vrednost nebazne promenljive:  4.0 je 0\n",
      "Vrednost nebazne promenljive:  5.0 je 0\n"
     ]
    }
   ],
   "source": [
    "import numpy as np \n",
    "import itertools\n",
    "import math\n",
    " \n",
    "def primitive(A, rezultat, b, c):\n",
    "    indeksi = np.array([i for i in range(c.size)])\n",
    "    kombinacije = list(itertools.permutations(indeksi, b.size))\n",
    "\n",
    "    for co in kombinacije:\n",
    "        print('co: ')\n",
    "        print(co)\n",
    "        proba = np.asarray(co)\n",
    "        k = 0\n",
    "\n",
    "        for j in proba:\n",
    "            rezultat[k] = A[j]\n",
    "            k = k+1\n",
    "\n",
    "        if np.linalg.det(rezultat) != 0:\n",
    "            cb = proba\n",
    "            cb = np.asarray(cb)\n",
    "            \n",
    "            rezultat = np.linalg.inv(rezultat)\n",
    "            rezultat = rezultat.transpose()\n",
    "            b_novo = np.matmul(rezultat, b)\n",
    "            print(b_novo)\n",
    "\n",
    "            if np.all(b_novo > 0):\n",
    "               return rezultat, cb, b_novo\n",
    " \n",
    " \n",
    "def napravi_matricu(A, c,  b, rezultat):\n",
    "    rezultat, cb, b = primitive(A, rezultat, b, c)\n",
    "\n",
    "    bazna = np.zeros((cb.size))\n",
    "\n",
    "    nebazna = np.zeros((c.size-bazna.size))\n",
    "\n",
    "    indeksi = np.array([i for i in range(c.size)])\n",
    "    \n",
    "    for i in range(len(bazna)):\n",
    "        bazna[i] = cb[i]\n",
    " \n",
    "    j = 0\n",
    "    for i in indeksi:\n",
    "        if i not in bazna:\n",
    "            nebazna[j] = i\n",
    "            j = j + 1\n",
    "        \n",
    "    for i in range(len(cb)):\n",
    "        cb[i] = c[cb[i]]\n",
    "        \n",
    "    w = np.matmul(cb, rezultat)\n",
    "\n",
    "    print(\"w: \")\n",
    "    print(w)\n",
    "\n",
    "    B = rezultat\n",
    "\n",
    "    cbb = np.matmul(cb,b)\n",
    "\n",
    "    print('cbb: ')\n",
    "    print(cbb)\n",
    "\n",
    "    druga_dimenzija = w.size + cbb.ndim+1\n",
    "    prva_dimenzija = 1 + w.size\n",
    "\n",
    "    matrica = np.zeros((prva_dimenzija, druga_dimenzija))\n",
    "    matrica[0][0:w.size] = w\n",
    "    \n",
    "    for i in range(1, prva_dimenzija):\n",
    "        matrica[i][0:w.size]=B[i-1]\n",
    "        matrica[i][w.size]=b[i-1]\n",
    "    \n",
    "    matrica[0][w.size] = cbb\n",
    "    \n",
    "    return bazna, nebazna, cb,  b, rezultat, matrica, w\n",
    "\n",
    "\n",
    "def najnegativnije(nebazna, A, c, w):\n",
    "    najnegativnija = math.inf\n",
    "    zameni = math.inf\n",
    "    for i in nebazna:\n",
    "        temp = np.matmul(w, A[int(i)])-c[int(i)]\n",
    "        \n",
    "        if temp < najnegativnija:\n",
    "            najnegativnija = temp\n",
    "            zameni = i\n",
    " \n",
    "    return zameni, najnegativnija\n",
    " \n",
    "def najmanji_poz_broj(matrica, w):\n",
    "    najmanjiPozitivan = math.inf\n",
    "    pivot = math.inf\n",
    "\n",
    "    for i in range(1, 1 + w.size):\n",
    "            temp = matrica[i][w.size] / matrica[i][w.size+1]\n",
    "            if temp >= 0 and temp <= najmanjiPozitivan:\n",
    "                najmanjiPozitivan = temp\n",
    "                stari_indeks = i-1\n",
    "                pivot = matrica[i][w.size+1]\n",
    "    return stari_indeks, najmanjiPozitivan, pivot\n",
    "\n",
    "def zameni(bazna, nebazna, zameni, stari_indeks):\n",
    "    temp = bazna[int(stari_indeks)]\n",
    "    \n",
    "    bazna[int(stari_indeks)] = nebazna[int(zameni)]   \n",
    "    \n",
    "    nebazna[int(zameni)] = temp\n",
    "\n",
    "    return bazna, nebazna\n",
    " \n",
    "def nadji_pivot(stari_indeks, w, matrica):\n",
    "    pivot_red = matrica[int(stari_indeks)+1]\n",
    "    pivot_kolona = matrica[:, w.size+1]\n",
    "    return pivot_red, pivot_kolona\n",
    " \n",
    "def kolone_redovi(stari_indeks, w, matrica, pivot):\n",
    "    for i in range(0, w.size+1):\n",
    "        matrica[int(stari_indeks)+1][i] = matrica[int(stari_indeks)+1][i] / pivot\n",
    "\n",
    "    for i in range(0,w.size+1): \n",
    "        if i != stari_indeks+1:\n",
    "            matrica[i][w.size+1] /= -pivot\n",
    "\n",
    "    return matrica\n",
    " \n",
    " \n",
    "def step(nebazna, A, c, w, matrica, rezultat, bazna):\n",
    "     \n",
    "    zameni, najnegativnija = najnegativnije(nebazna, A, c, w)\n",
    "    \n",
    "    matrica[0][w.size+1] = najnegativnija\n",
    "    \n",
    "    for i in range(0, w.size):\n",
    "        for j in range(0, w.size):\n",
    "             rezultat[i][j]= matrica[i+1][j]\n",
    "    \n",
    "    pomocna = np.matmul(rezultat, A[int(nebazna[int(zameni)])])\n",
    "    \n",
    "    for i in range(1,1+w.size):\n",
    "         matrica[i][w.size + 1] = pomocna[i-1]\n",
    "         \n",
    "    stari_indeks, najmanjiPozitivan, pivot = najmanji_poz_broj(matrica, w)\n",
    "    bazna, nebazna = zameni(bazna, nebazna, zameni, stari_indeks)\n",
    "   \n",
    "    matrica[int(stari_indeks)+1][1+w.size] = 1/pivot\n",
    "    pivotRed, pivotKolona = nadji_pivot(stari_indeks, w, matrica)\n",
    "    matrica = kolone_redovi(stari_indeks, w, matrica, pivot)   \n",
    "    for i in range(0, w.size+1): \n",
    "         pivotRed[i] = matrica[int(stari_indeks)+1][i] * pivot\n",
    "                 \n",
    "    for i in range(0, w.size+1): \n",
    "       pivotKolona[i] = -matrica[i][w.size+1] * pivot\n",
    "                \n",
    "    for i in range(0, w.size+1):\n",
    "        for j in range(0, w.size+1): \n",
    "              if i != stari_indeks+1 and j != w.size+1:\n",
    "                     matrica[i][j] -= (pivotKolona[i]*pivotRed[j]/pivot)\n",
    " \n",
    "    matrica= kolone_redovi(stari_indeks, w, matrica, pivot)  \n",
    "    return matrica, nebazna, A, c, w, matrica, rezultat, bazna\n",
    "\n",
    "def test(A, b, c):\n",
    "    A = A.transpose()\n",
    "\n",
    "    rezultat  = np.zeros((b.size, b.size))\n",
    "    bazna, nebazna, cb,  b, rezultat, matrica, w = napravi_matricu(A, c,  b, rezultat)\n",
    "    zamena, najnegativnija = najnegativnije(nebazna, A, c, w)\n",
    "\n",
    "    while True:\n",
    "        if najnegativnija > 0:\n",
    "            break\n",
    "        matrica, nebazna, A, c, w, matrica, rezultat, bazna = step(nebazna, A, c, w, matrica, rezultat, bazna)\n",
    "        w = matrica[0][0:w.size]\n",
    "        zamena, najnegativnija = najnegativnije(nebazna, A, c, w)\n",
    "        if najnegativnija > 0:\n",
    "            break\n",
    "\n",
    "    print(\"Maksimum je\", matrica[0, w.size])\n",
    "    for i in range(0, bazna.size):\n",
    "        print(\"Vrednost bazne promenljive:  \", bazna[i]+1, \"je \", matrica[i+1, w.size])\n",
    "    for i in range(0, nebazna.size):\n",
    "        print(\"Vrednost nebazne promenljive: \", nebazna[i]+1, \"je 0\")\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    A = np.array([[-1,1,1,0,0],[1,0,0,1,0],[0,1,0,0,1]])\n",
    "    b = np.array([[1],[3],[2]])\n",
    "    c = np.array([1,1,0,0,0])\n",
    "\n",
    "    test(A, b, c)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": "null",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
